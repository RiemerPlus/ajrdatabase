#! /bin/sh
# buildFrameworks
#----------------------------------------------------------------------------------------
#	Script Name:	buildFrameworks
#
#	Edit Number:	000002
#
#	Description:	This file is a shell script which will cause the compilation of
#			        an XCode project in the current directory and install it with
#                   the intent of allowing for the debugging of that framework.  In
#                   otherwords it does not compile for install, but rather compiles
#                   for debug using a defined configuration.  By default that
#                   configuration is named RemoteUsers.  After the framework
#                   has been compiled the script will copy it to the install location
#                   so that an application can be linked against it and debugged, AND
#                   so the debug code is not stripped.
#
#                   the configuration name and install location can be overridden
#                   using command line options.  See usage for more information.
#
#	Author	Date		Edit	Description
#	-------	---------	------	---------------------------------------------------
#	Tom		7-20-2011	000002  Complete re-write and now takes command line options.
#----------------------------------------------------------------------------------------

CONFIG=Default
DEST="/"
SDIR='EOControl EOAccess EOInterface Adaptors'   
ADAPTOR_TARGET=Oracle
MAKETOOL="xcodebuild"
   
usage()
{
  echo
   echo "Usage:  buildFrameworks [-c <configname>]"              
   echo "     This script will build EOControl, EOAccess and Adaptors frameworks"
   echo "     -c <configname>"
   echo "              The project config to use.  By default this is Default." 
   echo "              You can override this by specifying a different config name"
   echo ""
   echo "Example: buildFrameworks -c Development"
   echo "         This will build all the frameworks for debug and then"
   echo "         install the result to /Library/Frameworks"
   echo 
   exit 1
}

warning()
{
   echo "WARNING!:  This script will install frameworks DIRECLTY into /Library/Frameworks"
   echo "           and into '/Library/Database Adaptors'.  If you don't want that to"
   echo "           happen then quit NOW!"
   echo ""
   echo "           Frameworks to be installed are:"
   echo "              EOControl"
   echo "              EOAccess"
   echo "              EOInterface"
   echo "           Database Adaptors (Bundles) are written to:"
   echo "              /Library/Database Adaptors"
   echo ""
   echo "Please Note:  In order to create the Oracle Adaptor the Oracle libraries must"
   echo "              already be installed in /usr/local/lib"
}

echoPlan()
{
	warning
	echo
	echo
	echo "This is the plan:"
	echo "   Compile the project $F"
	echo "      Config = $CONFIG"
	echo "      Install location = $DEST"
	echo "      Database Adaptor = (You will be promted to choose)"
	echo 
	echo
}

buildAdaptor()
{
	sudo $MAKETOOL -configuration $CONFIG -target $ADAPTOR_TARGET clean install DSTROOT=$DEST 
	CSTAT=$?
	if [ $CSTAT -eq 1 ]
	then
	    echo ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	    echo !!! The Adaptor failed to compile !!!
	    echo ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		exit 1
	fi
}

chooseAdaptor()
{
    # FINISHED=0
    # while [ $FINISHED -lt 1 ]; do
    #     echo ""
    #     PS3="Choose a Database Adaptor to compile/install "
    # 	options=(
    #     "Oracle"
    #     "MySQL"
    #     "SQLite"
    #     "PostgreSQL"
    #     "OpenBase"
    #     "Done" 
    #     )

    # 	select option in "${options[@]}"; do
    #     	case "$REPLY" in 
    #         	1) 
                   ADAPTOR_TARGET=Oracle 
                   buildAdaptor 
    #                break ;;
    #         	2) 
    #                ADAPTOR_TARGET=MySQL 
    #                buildAdaptor 
    #                break ;;
    #             3) 
	# 			   ADAPTOR_TARGET=SQLite 
    #                buildAdaptor 
    #                break ;;
    #             4)
	# 			   ADAPTOR_TARGET=PostgreSQL 
    #                buildAdaptor 
    #                break ;;
    #             5)
	# 			   ADAPTOR_TARGET=OpenBase 
    #                buildAdaptor 
    #                break ;;
    #         	6) 
    #                 FINISHED=1
    #                 break ;;
    #     	esac
    # 	done
    # done
} 

sanityCheck()
{
	
	if [ -r EOControl ]
	then
	  OK=1
	else
	  echo "No EOControl folder was found in the current directory, Make sure your current directory is the ajrdatabase directory."
	  exit 1
	fi                                                
}

# if an argument is a single character or a single character with a '-' prefix, then it is not good.
argTest()
{
	if [ "`echo "$1" | grep ^-.$`" ]
	then
		echo "Invalid option argument specified."
		usage
	fi    
	if [ "`echo "$1" | grep ^.$`" ]
	then
		echo "Invalid option argument specified."
		usage
	 fi
}

options()
{ 
	while getopts 'c:d:' opt; do
		case $opt in
			c) CONFIG=$OPTARG
				argTest $OPTARG;;
			[?])
				echo "Invalid option flag specified."
				usage
			;;
			:)
				echo "Option -${OPTARG} (source) was missing the argument of the source dir."
				usage
			;;
		esac
	done
	
	# if we got this far we are okay!
	echoPlan
}

buildProject()
{ 
	s=$1

	if [ ! -d $s ]
	then
		echo -------------------------------------------------------------------------
		echo ---    EXPECTED SOURCE DIRECTORY "$s" NOT FOUND   
		echo -------------------------------------------------------------------------
		exit 1
	fi
	
	echo ' '
  	echo ----------------------------------------------------------------
   	echo `date`
   	echo $s
 	echo ----------------------------------------------------------------

 	cd $s

	if [ "$s" = "Adaptors" ] 
	then
	 	chooseAdaptor
	else   
  	   	sudo $MAKETOOL -configuration $CONFIG clean install DSTROOT=$DEST 
		CSTAT=$?
		if [ $CSTAT -eq 1 ]
		then
	    	echo ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	    	echo !!! The framework failed to compile !!!
	    	echo ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			exit 1
		fi  			 

		echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
		echo " The framework $Framework compiled"
		echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"  
	fi
	
	cd ..
}

buildFrameworks()
{
	# build normal Frameworks
	for s in $SDIR
	do
		buildProject $s
	done
	
	echo ' '
	echo ----------------------------------------------------------------
	echo `date`
	echo Build Complete
	echo ----------------------------------------------------------------			
}

main()
{ 
	sanityCheck
	options $*
    buildFrameworks
}
      
main $*
